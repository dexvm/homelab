---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 40.0.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    alertmanager:
      enabled: true
      config:
        global:
          slack_api_url: "${SECRET_DISCORD_WEBHOOK_HOMELAB}"
        receivers:
          - name: "null"
          - name: "discord"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "PrometheusBot"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }}
                text: >-
                  {{- range .Alerts }}
                    {{- if ne .Labels.severity "" }}
                      **Severity:** {{ .Labels.severity }}
                    {{- else }}
                      **Severity:** N/A
                    {{- end }}
                    {{- if ne .Annotations.description "" }}
                      **Description:** {{ .Annotations.description }}
                    {{- else if ne .Annotations.summary "" }}
                      **Summary:** {{ .Annotations.summary }}
                    {{- else if ne .Annotations.message "" }}
                      **Message:** {{ .Annotations.message }}
                    {{- else }}
                      **Description:** N/A
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      **Details:**
                      {{- range .Labels.SortedPairs }}
                        • **{{ .Name }}:** {{ .Value }}
                      {{- end }}
                    {{- end }}
                  {{- end }}
          # - name: "telegram"
          #   telegram_configs:
          #     - send_resolved: true
          #       api_url: "https://api.telegram.org"
          #       bot_token: "${SECRET_ALERTMANAGER_TELEGRAM_TOKEN}"
          #       chat_id: "${SECRET_ALERTMANAGER_TELEGRAM_CHAT_ID}"
          #       message: >-
          #         {{ range .Alerts -}}
          #         **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

          #         **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}

          #         **Details:**
          #           {{ range .Labels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`{{ end }}
          #         {{ end }}
          #       disable_notifications: false
          #       parse_mode: MarkdownV2
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "discord"
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "nfs-client"
              resources:
                requests:
                  storage: 500Mi
    # kube-state-metrics:
    #   metricLabelsAllowlist:
    #     - "persistentvolumeclaims=[*]"
    #   prometheus:
    #     monitor:
    #       enabled: true
    #       relabelings:
    #         - action: replace
    #           regex: (.*)
    #           replacement: $1
    #           sourceLabels:
    #             - __meta_kubernetes_pod_node_name
    #           targetLabel: kubernetes_node
    # prometheus-node-exporter:
    #   prometheus:
    #     monitor:
    #       enabled: true
    #       relabelings:
    #         - action: replace
    #           regex: (.*)
    #           replacement: $1
    #           sourceLabels:
    #             - __meta_kubernetes_pod_node_name
    #           targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
      # endpoints:
      #   - 192.168.178.76
      #   - 192.168.178.144
      # service:
      #   enabled: true
      #   port: 10259
      #   targetPort: 10259
    kubeScheduler:
      enabled: false
      # endpoints:
      #   - 192.168.178.76
      #   - 192.168.178.144
      # service:
      #   enabled: true
      #   port: 10259
      #   targetPort: 10259
    kubeProxy:
      enabled: false
      # endpoints:
      #   - 192.168.178.76
      #   - 192.168.178.144
    kubeEtcd:
      enabled: false
      # endpoints:
      #   - 192.168.178.72
      #   - 192.168.178.76
      #   - 192.168.178.144
      # service:
      #   enabled: true
      #   port: 2381
      #   targetPort: 2381
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: "networking-local-only@kubernetescrd"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retentionSize: "6GB"
        enableAdminAPI: true
        walCompression: true
        resources:
          requests:
            cpu: 400m
            memory: 2000Mi
          limits:
            memory: 4500Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              # try using nfs...
              storageClassName: nfs-client
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.28.0
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: "v0.28.0"
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
        additionalScrapeConfigs:
          - job_name: minio
            metrics_path: /minio/v2/metrics/cluster
            static_configs:
              - targets:
                  - "${MINIO_NAS_ADDR}"
                  - "${MINIO_SSD_NAS_ADDR}"
          - job_name: coredns-nas
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${NAS_ADDR}:9160"
          # - job_name: node-exporter
          #   honor_timestamps: true
          #   static_configs:
          #     - targets:
          #         - "${NAS_ADDR}:9100"
