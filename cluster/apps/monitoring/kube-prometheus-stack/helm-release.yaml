---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 47.4.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    alertmanager:
      enabled: true
      config:
        global:
          slack_api_url: "${SECRET_DISCORD_WEBHOOK_HOMELAB}"
        receivers:
          - name: "null"
          - name: "discord"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "PrometheusBot"
                send_resolved: true
                title: |-
                  {{ .CommonLabels.alertname }} [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}]
                message: |-
                  {{- range .Alerts }}
                    {{- if ne .Annotations.description "" }}
                      {{ .Annotations.description }}
                    {{- else if ne .Annotations.summary "" }}
                      {{ .Annotations.summary }}
                    {{- else if ne .Annotations.message "" }}
                      {{ .Annotations.message }}
                    {{- else }}
                      Alert description not available
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      <small>
                      {{- range .Labels.SortedPairs }}
                        <b>{{ .Name }}:</b> {{ .Value }}
                      {{- end }}
                      </small>
                    {{- end }}
                  {{- end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 1m
          group_interval: 10m
          repeat_interval: 12h
          receiver: "discord"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "discord"
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
      alertmanagerSpec:
        replicas: 1
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "nfs-client"
              resources:
                requests:
                  storage: 500Mi
    # kube-state-metrics:
    #   metricLabelsAllowlist:
    #     - "persistentvolumeclaims=[*]"
    #   prometheus:
    #     monitor:
    #       enabled: true
    #       relabelings:
    #         - action: replace
    #           regex: (.*)
    #           replacement: $1
    #           sourceLabels:
    #             - __meta_kubernetes_pod_node_name
    #           targetLabel: kubernetes_node
    # prometheus-node-exporter:
    #   prometheus:
    #     monitor:
    #       enabled: true
    #       relabelings:
    #         - action: replace
    #           regex: (.*)
    #           replacement: $1
    #           sourceLabels:
    #             - __meta_kubernetes_pod_node_name
    #           targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: ["__name__"]
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|storage_operation|volume_manager|volume_operation|workqueue)_(.+)"
            action: keep
          - sourceLabels: ["node"]
            targetLabel: instance
            action: replace
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: ["__name__"]
            regex: "(aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)"
            action: keep
          # Remove high cardinality metrics
          - sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop
    kubeControllerManager:
      enabled: false
      # endpoints:
      #   - 192.168.178.76
      #   - 192.168.178.144
      # service:
      #   enabled: true
      #   port: 10259
      #   targetPort: 10259
    kubeScheduler:
      enabled: false
      # endpoints:
      #   - 192.168.178.76
      #   - 192.168.178.144
      # service:
      #   enabled: true
      #   port: 10259
      #   targetPort: 10259
    kubeProxy:
      enabled: false
      # endpoints:
      #   - 192.168.178.76
      #   - 192.168.178.144
    kubeEtcd:
      enabled: false
      # endpoints:
      #   - 192.168.178.72
      #   - 192.168.178.76
      #   - 192.168.178.144
      # service:
      #   enabled: true
      #   port: 2381
      #   targetPort: 2381
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retentionSize: "6GB"
        enableAdminAPI: true
        walCompression: true
        resources:
          requests:
            cpu: 400m
            memory: 2000Mi
          limits:
            memory: 4500Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              # try using nfs...
              storageClassName: nfs-client
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.31.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
        additionalScrapeConfigs:
          - job_name: minio
            metrics_path: /minio/v2/metrics/cluster
            static_configs:
              - targets:
                  - "${MINIO_NAS_ADDR}"
                  - "${MINIO_SSD_NAS_ADDR}"
          - job_name: coredns-nas
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${NAS_ADDR}:9160"
          # - job_name: node-exporter
          #   honor_timestamps: true
          #   static_configs:
          #     - targets:
          #         - "${NAS_ADDR}:9100"
