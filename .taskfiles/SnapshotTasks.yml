---
version: "3"

x-preconditions:
  - &has-app
    sh: kubectl get deploy,sts -A | awk '/{{.APP}}\s/{print $1}' | grep .
    msg: "App '{{.APP}}' not found"
  - &has-cronjob
    sh: kubectl get cronjob -n {{.NAMESPACE}} {{.PVC}}-snapshot
    msg: "CronJob '{{.PVC}}-snapshot' in namespace '{{.NAMESPACE}}' not found"
  - &has-pvc
    sh: kubectl get pvc -n {{.NAMESPACE}} {{.PVC}}
    msg: "PersistentVolumeClaim '{{.PVC}}' in namespace '{{.NAMESPACE}}' not found"
  - &has-restore-job
    msg: "File '{{.PROJECT_DIR}}/hack/restore-job.yaml' not found"
    sh: "test -f {{.PROJECT_DIR}}/hack/restore-job.yaml"

tasks:
  list:
    desc: List all existing snapshots for a PVC (task PVC=jellyfin-data-v1 snapshot:list)
    cmds:
      - kubectl exec -it deployment/kopia -- kopia snapshot list /data/{{.PVC}} {{.CLI_ARGS}}
    preconditions:
      - sh: kubectl get deployment kopia
        msg: |
          deployment/kopia in namespace default not found

  create:
    desc: Spawn a job to create a snapshot for an app (task PVC=jellyfin-data-v1 snapshot:create)
    cmds:
      - |
        kubectl -n {{.NAMESPACE}} create job --from=cronjob/{{.PVC}}-snapshot {{.PVC}}-snapshot-{{.TS}} --dry-run=client --output yaml \
          | yq eval "del(.spec.template.spec.initContainers)" - \
          | kubectl apply -f -
      - sleep 2
      - kubectl -n {{.NAMESPACE}} wait pod --for condition=ready --selector=job-name={{.PVC}}-snapshot-{{.TS}} --timeout=1m
      - kubectl -n {{.NAMESPACE}} logs --selector=job-name={{.PVC}}-snapshot-{{.TS}} -f
      - defer: kubectl -n {{.NAMESPACE}} delete job {{.PVC}}-snapshot-{{.TS}}
    vars:
      NAMESPACE:
        sh: kubectl get pvc -A | awk '/{{.PVC}}\s/{print $1}'
      TS: '{{now | date "20060102150405"}}'
    preconditions:
      - *has-cronjob
      - *has-pvc

  restore:
    desc: Spawn a job to restore an app from a snapshot (task PVC=jellyfin-data-v1 KOPIA_PASSWORD=pass [SNAPSHOT=(latest|<snapshot-id>)] snapshot:restore)
    cmds:
      - flux -n {{.NAMESPACE}} suspend helmrelease {{.APP}}
      - kubectl -n {{.NAMESPACE}} scale deployment/{{.APP}} --replicas 0
      - kubectl -n {{.NAMESPACE}} wait pod --for delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=2m
      - envsubst < <(cat ./hack/restore-job.yaml) | kubectl apply -f -
      - sleep 2
      - kubectl -n {{.NAMESPACE}} wait job --for condition=complete {{.PVC}}-restore-snapshot --timeout=120m
      - flux -n {{.NAMESPACE}} resume helmrelease {{.APP}}
      - kubectl -n {{.NAMESPACE}} logs job/{{.PVC}}-restore-snapshot
      - defer: kubectl -n {{.NAMESPACE}} delete job {{.PVC}}-restore-snapshot
    vars:
      NAMESPACE:
        sh: kubectl get pvc -A | awk '/{{.PVC}}\s/{print $1}'
      APP:
        sh: kubectl get pvc -n {{.NAMESPACE}} {{.PVC}} -o jsonpath="{.metadata.labels.app\.kubernetes\.io/name}"
      SNAPSHOT: '{{.SNAPSHOT | default "latest"}}'
    env:
      NAMESPACE: "{{.NAMESPACE}}"
      PVC: "{{.PVC}}"
      KOPIA_PASSWORD: "{{.KOPIA_PASSWORD}}"
      SNAPSHOT:
        sh: |
          if [[ {{.SNAPSHOT}} == "latest" ]]; then
            kubectl exec deployment/kopia -- kopia snapshot list /data/{{.PVC}} --json | jq --raw-output '.[-1] | .id'
          else
            echo {{.SNAPSHOT}}
          fi
    preconditions:
      - *has-app
      - *has-pvc
      - *has-restore-job
